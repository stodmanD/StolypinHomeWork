import static java.lang.Math.abs;
import static java.lang.Math.sqrt;

public class SquareRoot {
    public static double[] solve(double a, double b, double c, double e) {
        if (abs(a) <= e) {
            throw new ArithmeticException("a не должно быть равно 0");
        }

        if (Double.isNaN(a) || Double.isNaN(b) || Double.isNaN(c)) {
            throw new ArithmeticException("Ошибка, один из коэффициентов является NAN");
        }
        if (Double.isInfinite(a) || Double.isInfinite(b) || Double.isInfinite(c)) {
            throw new ArithmeticException("Ошибка, один из коэффициентов является INFINITE");
        }
        double determinant = b * b - 4 * a * c;

        if (determinant < -e) {
            return new double[]{};
        }
        if (abs(determinant) < e) {
            return new double[]{-b / (2 * a), -b / (2 * a)};
        }
        if (determinant > e) {
            return new double[]{(-b + sqrt(determinant)) / (2 * a), (-b - sqrt(determinant)) / (2 * a)};
        }
        return new double[]{};
    }
}
//    Создать проект на gitlab/github.
//        Настроить CI, чтобы можно было собирать проект и прогонять тесты.
//                           ax2+bx+c = 0 (a≠0)
//        Написать тест, который проверяет, что для уравнения x^2+1 = 0 корней нет (возвращается пустой массив)
//        Написать минимальную реализацию функции solve, которая удовлетворяет данному тесту.
//        Написать тест, который проверяет, что для уравнения x^2-1 = 0 есть два корня кратности 1 (x1=1, x2=-1)
//        Написать минимальную реализацию функции solve, которая удовлетворяет тесту из п.5.
//        Написать тест, который проверяет, что коэффициент a не может быть равен 0. В этом случае solve выбрасывает исключение.
//        Примечание. Учесть, что a имеет тип double и сравнивать с 0 через == нельзя.
//        Написать минимальную реализацию функции solve, которая удовлетворяет тесту из п.9.
//        Написать тест, который проверяет, что для уравнения x^2+2x+1 = 0 есть один корень кратности 2 (x1= x2 = -1).
//        Написать минимальную реализацию функции solve, которая удовлетворяет тесту из п.7.
//


//
//        С учетом того, что дискриминант тоже нельзя сравнивать с 0 через знак равенства, подобрать такие коэффициенты квадратного уравнения для случая одного корня кратности два, чтобы дискриминант был отличный от нуля, но меньше заданного эпсилон. Эти коэффициенты должны заменить коэффициенты в тесте из п. 7.
//        При необходимости поправить реализацию квадратного уравнения.

//        Посмотреть какие еще значения могут принимать числа типа double, кроме числовых и написать тест с их использованием на все коэффициенты. solve должен выбрасывать исключение.
//        Написать минимальную реализацию функции solve, которая удовлетворяет тесту из п.13.
